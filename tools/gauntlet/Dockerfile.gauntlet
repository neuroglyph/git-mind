# Base image with common dependencies
FROM ubuntu:22.04 AS base
LABEL com.gitmind.project="git-mind" \
      org.opencontainers.image.title="git-mind-gauntlet"

ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=UTC
ENV GITMIND_DOCKER=1

# Install base dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    ninja-build \
    python3 \
    python3-pip \
    pkg-config \
    libsodium-dev \
    libgit2-dev \
    libroaring-dev \
    git \
    curl \
    meson && rm -rf /var/lib/apt/lists/*
HEALTHCHECK --interval=30s --timeout=5s --retries=3 CMD sh -lc "$CC --version >/dev/null 2>&1 || exit 1"

# Provide test runner in base so all targets inherit it
RUN echo '#!/bin/bash' > /test-compiler.sh && \
    echo 'set -e' >> /test-compiler.sh && \
    echo 'echo "🔫 Testing $CC..."' >> /test-compiler.sh && \
    echo 'echo "Compiler: $CC"' >> /test-compiler.sh && \
    echo 'echo "C++ Compiler: $CXX"' >> /test-compiler.sh && \
    echo '' >> /test-compiler.sh && \
    echo '# Clean previous build' >> /test-compiler.sh && \
    echo 'rm -rf build' >> /test-compiler.sh && \
    echo '' >> /test-compiler.sh && \
    echo '# Setup build with current compiler' >> /test-compiler.sh && \
    echo 'if meson setup build --warnlevel=3; then' >> /test-compiler.sh && \
    echo '    echo "✅ Meson setup successful"' >> /test-compiler.sh && \
    echo '    if ninja -C build; then' >> /test-compiler.sh && \
    echo '        echo "✅ Build successful"' >> /test-compiler.sh && \
    echo '        if ninja -C build test; then' >> /test-compiler.sh && \
    echo '            echo "✅ Tests passed"' >> /test-compiler.sh && \
    echo '            echo "PASS"' >> /test-compiler.sh && \
    echo '        else echo "❌ Tests failed"; echo "FAIL_TEST"; fi' >> /test-compiler.sh && \
    echo '    else echo "❌ Build failed"; echo "FAIL_BUILD"; fi' >> /test-compiler.sh && \
    echo 'else echo "❌ Meson setup failed"; echo "FAIL_SETUP"; fi' >> /test-compiler.sh && \
    chmod +x /test-compiler.sh
WORKDIR /workspace
CMD ["/test-compiler.sh"]

# GCC 12 (THE DEVIL) - Pre-C23 image
FROM base AS gcc-12
RUN apt-get update && apt-get install -y --no-install-recommends \
    software-properties-common \
    wget \
    gnupg && \
    add-apt-repository ppa:ubuntu-toolchain-r/test -y && \
    apt-get update && \
    apt-get install -y --no-install-recommends gcc-12 g++-12 && \
    rm -rf /var/lib/apt/lists/*
ENV CC=gcc-12
ENV CXX=g++-12

# GCC 13 - C23 support image
FROM base AS gcc-13
RUN apt-get update && apt-get install -y --no-install-recommends \
    software-properties-common \
    wget \
    gnupg && \
    add-apt-repository ppa:ubuntu-toolchain-r/test -y && \
    apt-get update && \
    apt-get install -y --no-install-recommends gcc-13 g++-13 && \
    rm -rf /var/lib/apt/lists/*
ENV CC=gcc-13
ENV CXX=g++-13

# Clang 18 - C23 support image
FROM base AS clang-18
RUN apt-get update && apt-get install -y --no-install-recommends \
    wget \
    gnupg \
    lsb-release \
    software-properties-common && \
    wget -O - https://apt.llvm.org/llvm.sh | bash -s -- 18 all && \
    apt-get install -y --no-install-recommends clang-18 clang++-18 clang-tidy-18 && \
    rm -rf /var/lib/apt/lists/*
ENV CC=clang-18
ENV CXX=clang++-18

# Clang 19 - C23 support image
FROM base AS clang-19
RUN apt-get update && apt-get install -y --no-install-recommends \
    wget \
    gnupg \
    lsb-release \
    software-properties-common && \
    wget -O - https://apt.llvm.org/llvm.sh | bash -s -- 19 all && \
    apt-get install -y --no-install-recommends clang-19 clang++-19 clang-tidy-19 && \
    rm -rf /var/lib/apt/lists/*
ENV CC=clang-19
ENV CXX=clang++-19

# Clang 20 - Latest C23 support image
FROM base AS clang-20
RUN apt-get update && apt-get install -y --no-install-recommends \
    wget \
    gnupg \
    lsb-release \
    software-properties-common && \
    wget -O - https://apt.llvm.org/llvm.sh | bash -s -- 20 all && \
    apt-get install -y --no-install-recommends clang-20 clang++-20 clang-tidy-20 && \
    rm -rf /var/lib/apt/lists/*
ENV CC=clang-20
ENV CXX=clang++-20

# Ubuntu 24.04 base (for gcc-14)
FROM ubuntu:24.04 AS base-noble
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=UTC
ENV GITMIND_DOCKER=1
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    ninja-build \
    python3 \
    python3-pip \
    pkg-config \
    libsodium-dev \
    libgit2-dev \
    libroaring-dev \
    git \
    curl \
    meson && rm -rf /var/lib/apt/lists/*
HEALTHCHECK --interval=30s --timeout=5s --retries=3 CMD sh -lc "$CC --version >/dev/null 2>&1 || exit 1"
# Provide test runner in base-noble too
RUN echo '#!/bin/bash' > /test-compiler.sh && \
    echo 'set -e' >> /test-compiler.sh && \
    echo 'echo "🔫 Testing $CC..."' >> /test-compiler.sh && \
    echo 'echo "Compiler: $CC"' >> /test-compiler.sh && \
    echo 'echo "C++ Compiler: $CXX"' >> /test-compiler.sh && \
    echo 'rm -rf build' >> /test-compiler.sh && \
    echo 'if meson setup build --warnlevel=3; then' >> /test-compiler.sh && \
    echo '  if ninja -C build; then' >> /test-compiler.sh && \
    echo '    if ninja -C build test; then echo "PASS"; else echo "FAIL_TEST"; fi' >> /test-compiler.sh && \
    echo '  else echo "FAIL_BUILD"; fi' >> /test-compiler.sh && \
    echo 'else echo "FAIL_SETUP"; fi' >> /test-compiler.sh && \
    chmod +x /test-compiler.sh
WORKDIR /workspace
CMD ["/test-compiler.sh"]

# GCC 14 target (gating)
FROM base-noble AS gcc-14
RUN apt-get update && apt-get install -y --no-install-recommends gcc-14 g++-14 && rm -rf /var/lib/apt/lists/*
ENV CC=gcc-14
ENV CXX=g++-14
