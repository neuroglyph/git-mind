name: Core Quality Checks

on:
  push:
    branches: [ main, dev, enforced ]
  pull_request:
    branches: [ main ]

jobs:
  lint-and-sanitize:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y clang clang-tidy libsodium-dev build-essential
    
    - name: Check for TODOs/FIXMEs
      run: |
        echo "Checking for forbidden TODO/FIXME/XXX comments..."
        if grep -nE "(TODO|FIXME|XXX)" $(find core -name "*.c" -o -name "*.h" 2>/dev/null); then
          echo "❌ NO TODOs ALLOWED"
          exit 1
        fi
        echo "✅ No TODOs found"
    
    - name: Run clang-tidy
      run: |
        cd core
        echo "Running clang-tidy with warnings as errors..."
        find src include -name "*.c" -o -name "*.h" | \
          xargs clang-tidy -warnings-as-errors='*' \
          -header-filter='.*' \
          -- -I./include -DGITMIND_CORE_BUILD
    
    - name: Build with Address Sanitizer
      run: |
        cd core
        make clean
        echo "Building with AddressSanitizer..."
        CC=clang CFLAGS="-Wall -Wextra -Werror -std=gnu11 -O2 -fsanitize=address -fno-omit-frame-pointer -g" make all
    
    - name: Run tests with Address Sanitizer
      run: |
        cd core
        echo "Running tests with AddressSanitizer..."
        ASAN_OPTIONS=detect_leaks=1:strict_string_checks=1:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1 make test
    
    - name: Build with Undefined Behavior Sanitizer
      run: |
        cd core
        make clean
        echo "Building with UBSanitizer..."
        CC=clang CFLAGS="-Wall -Wextra -Werror -std=gnu11 -O2 -fsanitize=undefined -fno-omit-frame-pointer -g" make all
    
    - name: Run tests with Undefined Behavior Sanitizer
      run: |
        cd core
        echo "Running tests with UBSanitizer..."
        UBSAN_OPTIONS=print_stacktrace=1:halt_on_error=1 make test
    
    - name: Build with Memory Sanitizer (if available)
      continue-on-error: true
      run: |
        cd core
        if command -v clang-14 &> /dev/null; then
          make clean
          echo "Building with MemorySanitizer..."
          CC=clang-14 CFLAGS="-Wall -Wextra -Werror -std=gnu11 -O2 -fsanitize=memory -fno-omit-frame-pointer -g" make all
          MSAN_OPTIONS=halt_on_error=1 make test
        else
          echo "MemorySanitizer requires clang-14+, skipping..."
        fi
    
    - name: Standard build and test
      run: |
        cd core
        make clean
        echo "Running standard build..."
        make all
        make test
    
    - name: Install coverage tools
      run: |
        sudo apt-get install -y gcovr
    
    - name: Run coverage analysis
      run: |
        cd core
        echo "Running coverage analysis..."
        make coverage-text || {
          echo "❌ Coverage requirements not met!"
          echo "Minimum line coverage: 80%"
          echo "Minimum branch coverage: 70%"
          exit 1
        }
    
    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report
        path: core/build/coverage.html