#!/usr/bin/env bash
set -euo pipefail

# Guard: allow bypass
if [[ "${HOOKS_BYPASS:-}" == "1" ]]; then
  exit 0
fi

remote_name=$1
remote_url=$2

status=0
while read -r local_ref local_sha remote_ref remote_sha; do
  # Only enforce for pushes to main
  if [[ "$remote_ref" == "refs/heads/main" ]]; then
    # Determine the range to inspect
    range=""
    if [[ "$remote_sha" == "0000000000000000000000000000000000000000" ]]; then
      # New branch/update; check last commit only
      range="$local_sha^..$local_sha"
    else
      range="$remote_sha..$local_sha"
    fi

    # Check if a changelog file is updated in this push
    # Match common variants: CHANGELOG, CHANGES, with optional .md, case-insensitive, with or without paths
    if ! git diff --name-only "$range" | grep -iqE '(^|.*/)(CHANGELOG|CHANGES)(\.md)?$'; then
      echo "[pre-push] No changelog file updated for push to main ($range)." >&2
      echo "           Expected one of: CHANGELOG.md, CHANGES.md, or variants (case-insensitive)." >&2
      echo "           Run: make changelog-add m=\"<one-liner>\"" >&2
      echo "           Or bypass once: HOOKS_BYPASS=1 git push" >&2
      status=1
    fi
  fi

  # Worksheet gate: block pushes when review worksheets contain unfilled templates
  # Determine the range to inspect for all branches
  range=""
  if [[ "$remote_sha" == "0000000000000000000000000000000000000000" ]]; then
    range="$local_sha^..$local_sha"
  else
    range="$remote_sha..$local_sha"
  fi
  changed_files=$(git diff --name-only "$range" | grep '^docs/code-reviews/PR' || true)
  if [[ -n "$changed_files" ]]; then
    # Run worksheet checker
    if ! python3 tools/review/check_worksheets.py $changed_files; then
      echo "[pre-push] Unfilled review worksheet templates detected in changed files." >&2
      echo "           Please complete Accepted/Rejected sections before pushing." >&2
      echo "           Bypass once with HOOKS_BYPASS=1 if necessary." >&2
      status=1
    fi
  fi
done

exit $status
