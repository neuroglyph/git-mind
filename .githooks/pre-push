#!/usr/bin/env bash
set -euo pipefail

echo "🔥  Running COMPLETE CI stack in Docker before push…"

IMAGE=gitmind-ci:latest

# Build the image only if it doesn't exist or Dockerfile changed
docker build -q -t $IMAGE .ci 2>/dev/null || {
  echo "🔄  Building CI image (first time or Dockerfile changed)…"
  docker build -t $IMAGE .ci
}

# Run EVERYTHING that GitHub Actions runs
docker run --rm -t \
  -v "$PWD":/workspace \
  -w /workspace \
  $IMAGE \
  bash -c '
    set -e
    
    echo "════════════════════════════════════════════════════════════════"
    echo "Running C-Core Gate checks (c_core.yml)"
    echo "════════════════════════════════════════════════════════════════"
    
    # Build & capture compile DB
    CC=clang meson setup build
    ninja -C build
    cp build/compile_commands.json .
    
    # clang-tidy (diff-guard)
    echo "→ Running clang-tidy with baseline enforcement..."
    clang-tidy -quiet -p . --config-file=quality/.clang-tidy \
      $(git ls-files "core/**/*.c" "core/**/*.h") \
      | tee clang-tidy-report-full.txt || true
    # Filter to just project warnings
    grep -E "^/.*core/|^core/" clang-tidy-report-full.txt > clang-tidy-report.txt || true
    
    # Enforce no new warnings
    python3 tools/count_warnings.py check clang-tidy-report.txt tools/baseline_count.txt
    
    # cppcheck
    echo "→ Running cppcheck..."
    cppcheck --enable=all --inconclusive --quiet src
    
    # Fuzzing
    echo "→ Running fuzzer..."
    python tools/run_fuzz.py 60
    
    echo ""
    echo "════════════════════════════════════════════════════════════════"
    echo "Running Core Quality Checks (core-quality.yml)"
    echo "════════════════════════════════════════════════════════════════"
    
    # Check for TODOs/FIXMEs
    echo "→ Checking for forbidden TODO/FIXME/XXX comments..."
    if grep -nE "(TODO|FIXME|XXX)" $(find core -name "*.c" -o -name "*.h" 2>/dev/null); then
      echo "❌ NO TODOs ALLOWED"
      exit 1
    fi
    echo "✅ No TODOs found"
    
    # Run clang-tidy on all files (without warnings-as-errors, baseline handles that)
    echo "→ Running clang-tidy on all core files..."
    rm -rf build-tidy
    CC=clang meson setup build-tidy
    FILES=$(find core -name "*.c" -o -name "*.h" | grep -v "tests/")
    if [ -z "$FILES" ]; then
      echo "Error: No C/C++ files found to check"
      exit 1
    fi
    for file in $FILES; do
      clang-tidy -p build-tidy --config-file=quality/.clang-tidy "$file" || true
    done
    
    # Build with Address Sanitizer
    echo "→ Building and testing with AddressSanitizer..."
    rm -rf build-asan
    CC=clang CFLAGS="-fsanitize=address -fno-omit-frame-pointer -g" meson setup build-asan -Db_sanitize=address
    ninja -C build-asan
    ASAN_OPTIONS=detect_leaks=1:strict_string_checks=1:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1 ninja -C build-asan test
    
    # Build with Undefined Behavior Sanitizer
    echo "→ Building and testing with UBSanitizer..."
    rm -rf build-ubsan
    CC=clang CFLAGS="-fsanitize=undefined -fno-omit-frame-pointer -g" meson setup build-ubsan -Db_sanitize=undefined
    ninja -C build-ubsan
    UBSAN_OPTIONS=print_stacktrace=1:halt_on_error=1 ninja -C build-ubsan test
    
    # Standard build and test
    echo "→ Running standard build and tests..."
    rm -rf build-standard
    CC=clang meson setup build-standard
    ninja -C build-standard
    ninja -C build-standard test
    
    # Coverage analysis
    echo "→ Running coverage analysis..."
    rm -rf build-coverage
    CC=clang meson setup build-coverage -Db_coverage=true
    ninja -C build-coverage test
    cd build-coverage
    gcovr --root .. --html-details coverage.html --print-summary --fail-under-line 80 --fail-under-branch 70 || {
      echo "❌ Coverage requirements not met!"
      echo "Minimum line coverage: 80%"
      echo "Minimum branch coverage: 70%"
      exit 1
    }
    cd ..
    
    echo ""
    echo "════════════════════════════════════════════════════════════════"
    echo "✅ ALL CI CHECKS PASSED!"
    echo "════════════════════════════════════════════════════════════════"
'

echo "✅  Local CI passed—pushing allowed."