#!/bin/bash
# SPDX-License-Identifier: LicenseRef-MIND-UCAL-1.0
# ¬© 2025 J. Kirby Ross / Neuroglyph Collective

# Pre-commit hook to prevent committing build artifacts

# Check for .o files
if git diff --cached --name-only | grep -q '\.o$'; then
    echo "‚ùå ERROR: Object files (.o) detected!"
    echo ""
    echo "You have build artifacts that shouldn't be committed."
    echo "This means you compiled outside Docker!"
    echo ""
    echo "To fix:"
    echo "  1. Run 'make clean' to remove artifacts"
    echo "  2. Use 'make dev' or 'make test' instead"
    echo "  3. Stage your changes again"
    echo ""
    echo "Remember: ALL builds must happen in Docker! üê≥"
    exit 1
fi

# Check for other build artifacts
if git diff --cached --name-only | grep -E '\.(a|so|dylib|exe)$'; then
    echo "‚ùå ERROR: Build artifacts detected!"
    echo "Please remove them and build in Docker instead."
    exit 1
fi

# Check for the binary itself
if git diff --cached --name-only | grep -E '^git-mind$'; then
    echo "‚ùå ERROR: Trying to commit the git-mind binary!"
    echo "Binaries should not be in the repository."
    echo "Run 'make clean' and build in Docker."
    exit 1
fi

# THE MIGRATION ENFORCER - No touching src/ without FULL migration!
echo ""
echo "üî• MIGRATION ENFORCER: Checking for src/ modifications..."

# Get list of staged files
STAGED_FILES=$(git diff --cached --name-only)

# Check if any src/ files are being modified
SRC_FILES=$(echo "$STAGED_FILES" | grep "^src/" | grep "\.c$" || true)

if [ -n "$SRC_FILES" ]; then
    echo "‚ùå HALT! You're trying to modify files in src/!"
    echo ""
    echo "üìã Files detected:"
    echo "$SRC_FILES" | sed 's/^/   - /'
    echo ""
    echo "‚ö° THE RULE: Touch it = Fix it COMPLETELY!"
    echo ""
    echo "You MUST migrate these files to core/ or apps/ with:"
    echo "  1. ALL clang-tidy warnings fixed"
    echo "  2. ALL functions ‚â§15 lines (SRP)"
    echo "  3. NO magic numbers/strings"
    echo "  4. Comprehensive tests"
    echo ""
    echo "Use: ./scripts/migrate-module.sh <module> <destination>"
    echo ""
    echo "Or if absolutely necessary: git commit --no-verify"
    echo ""
    echo "Remember: We have 11,000+ warnings to fix. No half measures!"
    exit 1
fi

# Check if any files in core/ or apps/ meet quality standards
MIGRATED_FILES=$(echo "$STAGED_FILES" | grep -E "^(core|apps)/" | grep "\.c$" || true)

if [ -n "$MIGRATED_FILES" ]; then
    echo "üîç Verifying migrated files are 100% clean..."
    echo "(This check will be activated once core/ structure exists)"
    # TODO: Add strict clang-tidy check once core/ exists
fi

echo "‚úÖ All checks passed!"
exit 0