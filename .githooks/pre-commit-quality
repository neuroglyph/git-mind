#!/bin/bash
# SPDX-License-Identifier: LicenseRef-MIND-UCAL-1.0
# © 2025 J. Kirby Ross / Neuroglyph Collective

# Pre-commit hook for code quality checks using standard tools

# Only check staged C files
STAGED_C_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.c$')

if [ -z "$STAGED_C_FILES" ]; then
    exit 0
fi

echo "Running code quality pre-commit checks..."

# Create temp directory with staged files
TEMP_DIR=$(mktemp -d)
trap "rm -rf $TEMP_DIR" EXIT

# Copy staged files to temp directory maintaining structure
for file in $STAGED_C_FILES; do
    mkdir -p "$TEMP_DIR/$(dirname "$file")"
    git show ":$file" > "$TEMP_DIR/$file"
done

cd "$TEMP_DIR"
FAILED=0

# 1. If clang-tidy is available, use it
if command -v clang-tidy &> /dev/null; then
    echo -n "Running clang-tidy checks... "
    
    # Quick checks only for pre-commit
    if find . -name "*.c" | xargs clang-tidy \
        -checks='-*,readability-function-size,cppcoreguidelines-avoid-magic-numbers' \
        -config="{CheckOptions: [{key: readability-function-size.LineThreshold, value: 15}, {key: readability-function-size.BranchThreshold, value: 5}]}" \
        -- -I../../include 2>&1 | grep -q "warning:"; then
        echo "❌"
        echo "  Functions exceed 15 lines or have magic numbers"
        echo "  Run 'make check-quality' for details"
        FAILED=1
    else
        echo "✅"
    fi
fi

# 2. If cppcheck is available, run quick check
if command -v cppcheck &> /dev/null; then
    echo -n "Running cppcheck... "
    
    if ! cppcheck --quiet --error-exitcode=1 \
                  --enable=warning,style,performance \
                  --suppress=missingIncludeSystem \
                  --inline-suppr \
                  $STAGED_C_FILES 2>/dev/null; then
        echo "❌"
        FAILED=1
    else
        echo "✅"
    fi
fi

# 3. Check formatting with clang-format
if command -v clang-format &> /dev/null; then
    echo -n "Checking code formatting... "
    
    FORMAT_ISSUES=0
    for file in $STAGED_C_FILES; do
        if ! clang-format --dry-run --Werror "$file" 2>/dev/null; then
            FORMAT_ISSUES=1
            break
        fi
    done
    
    if [ $FORMAT_ISSUES -eq 1 ]; then
        echo "❌"
        echo "  Run 'make format' to fix formatting"
        FAILED=1
    else
        echo "✅"
    fi
fi

# 4. Quick complexity check with lizard if available
if command -v lizard &> /dev/null; then
    echo -n "Checking complexity... "
    
    if ! lizard $STAGED_C_FILES -C 10 -L 15 -a 5 2>&1 | grep -q "Warning"; then
        echo "✅"
    else
        echo "❌"
        echo "  Functions too complex (cyclomatic > 10)"
        FAILED=1
    fi
fi

# 5. For CLI files, check output control (our custom requirement)
CLI_FILES=$(echo "$STAGED_C_FILES" | grep "src/cli/" || true)
if [ -n "$CLI_FILES" ]; then
    echo -n "Checking CLI output control... "
    if grep -H 'printf\|fprintf' $CLI_FILES 2>/dev/null | \
       grep -v 'gm_output\|ctx->output' | \
       grep -v '// OK:' > /dev/null; then
        echo "❌"
        echo "  CLI must use output abstraction"
        FAILED=1
    else
        echo "✅"
    fi
fi

if [ $FAILED -eq 1 ]; then
    echo
    echo "❌ Pre-commit quality checks failed!"
    echo
    echo "To fix:"
    echo "  make format          # Fix formatting"
    echo "  make check-quality   # See all issues"
    echo "  make fix-tech-debt   # See manual fixes needed"
    exit 1
fi

echo "✅ Code quality checks passed"